{"version":3,"file":"static/js/634.3ade7744.chunk.js","mappings":"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","sources":["lib/mp/adapters/firebase.ts"],"sourcesContent":["// src/lib/mp/adapters/firebase.ts\n// -------------------------------------------------------------\n// Firebase RTDB adapter for Battleship MP\n// - Uses Realtime Database (RTDB) instead of Firestore\n// - Epoch segmentation fixes the \"late-join sees old match\" bug\n// - Pass-through of hello/bye/shot/result/phase/ready/quit/reveal/state\n// - CRA-safe env resolver (no import.meta)\n// -------------------------------------------------------------\n\nimport { initializeApp, getApps, FirebaseApp } from \"firebase/app\";\nimport {\n  getDatabase,\n  Database,\n  ref,\n  push,\n  onChildAdded,\n  off,\n  orderByKey,\n  query as rtdbQuery,\n  get,\n  set,\n  serverTimestamp,\n} from \"firebase/database\";\nimport type { MPAdapter, MPEvent } from \"../index\";\n\n// ------------------------------\n// [CFG] CRA-safe config resolver\n// ------------------------------\ntype FBClientCfg = {\n  apiKey: string;\n  projectId: string;\n  appId: string;\n  authDomain?: string;\n  databaseURL?: string;\n  storageBucket?: string;\n  messagingSenderId?: string;\n};\n\nconst ENV = (typeof process !== \"undefined\" ? (process as any).env : {}) || {};\nconst env = (k: string) =>\n  ENV[`REACT_APP_FIREBASE_${k}`] ?? ENV[`VITE_FIREBASE_${k}`] ?? undefined;\n\nfunction resolveFirebaseConfig(): FBClientCfg {\n  // 1) Prefer runtime config injected via public/index.html (you already set window.__FIREBASE)\n  const winCfg: Partial<FBClientCfg> =\n    (typeof window !== \"undefined\" &&\n      (((window as any).__FIREBASE as Partial<FBClientCfg>) ||\n        (window as any).__FZ_FB__)) ||\n    {};\n\n  // 2) Fallback to .env (CRA/Vite)\n  const envCfg: Partial<FBClientCfg> = {\n    apiKey: env(\"API_KEY\"),\n    authDomain: env(\"AUTH_DOMAIN\"),\n    projectId: env(\"PROJECT_ID\"),\n    databaseURL: env(\"DATABASE_URL\"),\n    storageBucket: env(\"STORAGE_BUCKET\"),\n    messagingSenderId: env(\"MESSAGING_SENDER_ID\"),\n    appId: env(\"APP_ID\"),\n  };\n\n  const cfg = { ...envCfg, ...winCfg } as Partial<FBClientCfg>;\n\n  // [GUARD] Keys that must exist (RTDB works fine with these three)\n  const required = [\"apiKey\", \"projectId\", \"appId\"] as const;\n  const missing = required.filter((k) => !cfg[k]);\n  if (missing.length) {\n    throw new Error(\n      `[Firebase config] Missing: ${missing.join(\n        \", \"\n      )}. Provide window.__FIREBASE in public/index.html or .env values.`\n    );\n  }\n  return cfg as FBClientCfg;\n}\n\n// ------------------------------\n// [BOOT] Single init + getters\n// ------------------------------\nlet _app: FirebaseApp | null = null;\nlet _db: Database | null = null;\n\nfunction ensureFirebase() {\n  if (!_app) {\n    const cfg = resolveFirebaseConfig();\n    _app = getApps()[0] || initializeApp(cfg); // [SAFE] no double-init\n    _db = getDatabase(_app);\n  }\n  return { app: _app!, db: _db! };\n}\n\n// ------------------------------\n// [RTDB paths & helpers]\n// ------------------------------\nconst metaPath = (code: string) => `rooms/${code}/meta/state`; // { epoch: number }\nconst eventsPath = (code: string, epoch: number) => `rooms/${code}/epochs/${epoch}/events`;\n\n// Publish an event under the current epoch (push key preserves time order)\nasync function publish(db: Database, code: string, epoch: number, e: MPEvent) {\n  const evRef = ref(db, eventsPath(code, epoch));\n  // Store both a server timestamp and a client time for debugging\n  await push(evRef, { ...e, at: serverTimestamp(), atClient: Date.now() });\n}\n\nasync function getOrInitEpoch(db: Database, code: string): Promise<number> {\n  const mref = ref(db, metaPath(code));\n  const snap = await get(mref);\n  if (!snap.exists()) {\n    await set(mref, { epoch: 0, createdAt: serverTimestamp() });\n    return 0;\n  }\n  const val = snap.val() || {};\n  return typeof val.epoch === \"number\" ? val.epoch : 0;\n}\n\nasync function setEpoch(db: Database, code: string, n: number) {\n  const mref = ref(db, metaPath(code));\n  await set(mref, { epoch: n, updatedAt: serverTimestamp() });\n}\n\n// -------------------------------------------------------------\n// Factory\n// -------------------------------------------------------------\nexport function createFirebaseAdapter(): MPAdapter {\n  const { db } = ensureFirebase();\n\n  let roomCode = \"\";\n  let currentEpoch = 0;\n  let unsub: (() => void) | null = null;\n  let onEvent: (e: MPEvent) => void = () => {};\n\n  // Listen to events in a given epoch in push-key order\n  function listenToEpoch(n: number) {\n    if (unsub) {\n        unsub();\n        unsub = null;\n    }\n\n    const q = rtdbQuery(ref(db, eventsPath(roomCode, n)), orderByKey());\n\n    // onChildAdded returns an unsubscribe function in v9\n    const detach = onChildAdded(q, (snap) => {\n        const data = snap.val() as any;\n        // serverTimestamp resolves later; atClient is immediate\n        const ev = { ...data, at: data?.atClient ?? Date.now() } as MPEvent;\n        onEvent(ev);\n    });\n\n    // keep a single consolidated unsubscribe\n    unsub = () => {\n        detach();   // detach the listener\n        off(q);     // extra safety: remove any remaining listeners on this ref/query\n    };\n    }\n\n  return {\n    async connect(code, _role, onEv) {\n      roomCode = code.toUpperCase();\n      onEvent = onEv;\n\n      // Read or initialize epoch\n      currentEpoch = await getOrInitEpoch(db, roomCode);\n\n      // Subscribe to current epoch only\n      listenToEpoch(currentEpoch);\n\n      // UI will emit 'hello' explicitly after connect (keeps logic deterministic)\n      return currentEpoch;\n    },\n\n    async send(e) {\n      await publish(db, roomCode, currentEpoch, e);\n    },\n\n    async bumpEpoch() {\n      // Host rotates to a fresh epoch after grace timeout\n      const next = currentEpoch + 1;\n      await setEpoch(db, roomCode, next);\n      currentEpoch = next;\n\n      // Rewire listener to the fresh epoch and announce it\n      listenToEpoch(currentEpoch);\n      await publish(db, roomCode, currentEpoch, { t: \"epoch\", n: currentEpoch, at: Date.now() } as MPEvent);\n      return currentEpoch;\n    },\n\n    async leave() {\n      if (unsub) {\n        unsub();\n        unsub = null;\n      }\n    },\n  };\n}\n\n// Support both named and default imports\nexport default createFirebaseAdapter;\n"],"names":["ENV","process","env","k","_ref","_ENV","undefined","_app","_db","ensureFirebase","cfg","winCfg","window","__FIREBASE","__FZ_FB__","apiKey","authDomain","projectId","databaseURL","storageBucket","messagingSenderId","appId","missing","filter","length","Error","join","resolveFirebaseConfig","getApps","initializeApp","getDatabase","app","db","metaPath","code","eventsPath","epoch","async","publish","e","evRef","ref","push","at","serverTimestamp","atClient","Date","now","createFirebaseAdapter","roomCode","currentEpoch","unsub","onEvent","listenToEpoch","n","q","rtdbQuery","orderByKey","detach","onChildAdded","snap","_data$atClient","data","val","ev","off","connect","_role","onEv","toUpperCase","mref","get","exists","set","createdAt","getOrInitEpoch","send","bumpEpoch","next","updatedAt","setEpoch","t","leave"],"sourceRoot":""}