{"version":3,"file":"static/js/634.77da08a1.chunk.js","mappings":"uKAmBO,SAASA,IACd,MAAM,GAAEC,GAbV,WACE,IAAKC,SAAYA,OAAeC,WAC9B,MAAM,IAAIC,MAAM,qEAElB,MAAMC,EAAOH,OAAeC,WAC5B,IAAIG,GAAMC,EAAAA,EAAAA,MAAU,KAAMC,EAAAA,EAAAA,IAAcH,GAExC,MAAO,CAAEC,MAAKL,IADHQ,EAAAA,EAAAA,IAAYH,GAEzB,CAKiBI,GAGf,IAAIC,EAA4B,KAC5BC,EAA0B,KAC1BC,EAAsB,KACtBC,EAAwC,KAuE5C,MAAO,CACLC,OAtEFC,eAAsBC,GACpBL,EAAW,UAAUK,IACrB,MAAMC,GAAOC,EAAAA,EAAAA,IAAIlB,EAAIW,UAEFQ,EAAAA,EAAAA,IAAIF,IACbG,gBACFC,EAAAA,EAAAA,IAAIJ,EAAM,CAAEK,UAAWC,KAAKC,OAEtC,EA+DEC,KA7DFV,eAAoBC,GAClBL,EAAW,UAAUK,IACrB,MAAMC,GAAOC,EAAAA,EAAAA,IAAIlB,EAAIW,GAErB,WADmBQ,EAAAA,EAAAA,IAAIF,IACbG,SAAU,MAAM,IAAIjB,MAAM,iBACtC,EAyDEuB,MAvDF,SAAeC,GAOb,OALIjB,IAAeA,IAAeA,EAAc,MAE5CG,KAAee,EAAAA,EAAAA,IAAOf,GAAagB,MAAM,QAAShB,EAAc,MACpED,EAAS,KACTD,EAAW,KACJmB,QAAQC,SACjB,EAgDEC,OA9CFjB,eAAsBC,EAAgBiB,GAIpC,GAHKtB,IAAUA,EAAW,UAAUK,KAGvB,UAATiB,EAAGC,EAAe,CACpBtB,EAASqB,EAAGE,GACZ,MAAMC,GAAOlB,EAAAA,EAAAA,IAAIlB,EAAI,GAAGW,cAClB0B,QAAclB,EAAAA,EAAAA,IAAIiB,GAClBE,EAAYD,EAAMjB,SAAWiB,EAAME,MAAQ,CAAC,EAElD,GAAc,SAAVN,EAAGE,IAAiBG,EAASE,KAAM,MAAM,IAAIrC,MAAM,cACvD,GAAc,UAAV8B,EAAGE,IAAkBG,EAASG,MAAO,MAAM,IAAItC,MAAM,eAGzDU,GAAc6B,EAAAA,EAAAA,IAAMN,EAAMH,EAAGE,UACvBd,EAAAA,EAAAA,IAAIR,GAAa,GACvB,KAAM8B,EAAAA,EAAAA,IAAa9B,GAAae,QAAU,CAAE,MAAO,CAGrD,CAGA,MAAMgB,GAAO1B,EAAAA,EAAAA,IAAIlB,EAAI,GAAGW,kBAClBkC,EAAAA,EAAAA,IAAKD,EAAMX,EACnB,EAuBEa,WArBF,SAAoB9B,EAAgB+B,GAC7BpC,IAAUA,EAAW,UAAUK,KACpC,MAAM4B,GAAO1B,EAAAA,EAAAA,IAAIlB,EAAI,GAAGW,YAGlBqC,GAASC,EAAAA,EAAAA,IAAaL,EAAOM,IACjC,MAAMC,EAAID,EAAKX,MACfQ,EAAG,CAAEK,OAAQ,CAACD,OAMhB,OAHAzC,EAAcA,MACZ2C,EAAAA,EAAAA,IAAIT,EAAM,cAAeI,IAEpBtC,CACT,EASF,C","sources":["lib/mp/adapters/firebase.ts"],"sourcesContent":["// src/lib/mp/adapters/firebase.ts\nimport type { MPAdapter, MPEvent, Role, Snapshot } from \"../index\";\nimport { initializeApp, getApps, type FirebaseApp } from \"firebase/app\";\nimport {\n  getDatabase, ref, child, set, get, push, onChildAdded, onDisconnect, off, Database, DatabaseReference, remove,\n} from \"firebase/database\";\n\nfunction ensureApp(): { app: FirebaseApp; db: Database } {\n  if (!window || !(window as any).__FIREBASE) {\n    throw new Error(\"Firebase config missing. Provide window.__FIREBASE in index.html.\");\n  }\n  const cfg = (window as any).__FIREBASE;\n  let app = getApps()[0] || initializeApp(cfg);\n  const db = getDatabase(app);\n  return { app, db };\n}\n\ntype Unsub = () => void;\n\nexport function firebaseAdapter(): MPAdapter {\n  const { db } = ensureApp();\n\n  // per-adapter state\n  let eventsUnsub: Unsub | null = null;\n  let roomPath: string | null = null;\n  let myRole: Role | null = null;\n  let presenceRef: DatabaseReference | null = null;\n\n  async function create(roomId: string) {\n    roomPath = `/rooms/${roomId}`;\n    const rRef = ref(db, roomPath);\n    // stay idempotent: only set createdAt if missing\n    const snap = await get(rRef);\n    if (!snap.exists()) {\n      await set(rRef, { createdAt: Date.now() });\n    }\n  }\n\n  async function join(roomId: string) {\n    roomPath = `/rooms/${roomId}`;\n    const rRef = ref(db, roomPath);\n    const snap = await get(rRef);\n    if (!snap.exists()) throw new Error(\"ROOM_NOT_FOUND\");\n  }\n\n  function leave(_roomId: string) {\n    // cleanup listeners\n    if (eventsUnsub) { eventsUnsub(); eventsUnsub = null; }\n    // drop our presence immediately (onDisconnect covers crash cases)\n    if (presenceRef) { remove(presenceRef).catch(()=>{}); presenceRef = null; }\n    myRole = null;\n    roomPath = null;\n    return Promise.resolve();\n  }\n\n  async function append(roomId: string, ev: MPEvent) {\n    if (!roomPath) roomPath = `/rooms/${roomId}`;\n\n    // Enforce occupancy on \"hello\"\n    if (ev.t === \"hello\") {\n      myRole = ev.by;\n      const pRef = ref(db, `${roomPath}/presence`);\n      const pSnap = await get(pRef);\n      const presence = (pSnap.exists() ? pSnap.val() : {}) as { host?: boolean; guest?: boolean };\n\n      if (ev.by === \"host\" && presence.host) throw new Error(\"HOST_TAKEN\");\n      if (ev.by === \"guest\" && presence.guest) throw new Error(\"GUEST_TAKEN\");\n\n      // set presence and onDisconnect removal\n      presenceRef = child(pRef, ev.by);\n      await set(presenceRef, true);\n      try { onDisconnect(presenceRef).remove(); } catch {}\n\n      // NOTE: presence is independent of events stream; continue to push the event\n    }\n\n    // Normal event push\n    const eRef = ref(db, `${roomPath}/events`);\n    await push(eRef, ev);\n  }\n\n  function onSnapshot(roomId: string, cb: (snap: Snapshot) => void): Unsub {\n    if (!roomPath) roomPath = `/rooms/${roomId}`;\n    const eRef = ref(db, `${roomPath}/events`);\n\n    // stream each new child as it arrives (avoids re-dispatch loops)\n    const detach = onChildAdded(eRef, (snap) => {\n      const v = snap.val() as MPEvent;\n      cb({ events: [v] });\n    });\n\n    eventsUnsub = () => {\n      off(eRef, \"child_added\", detach as any);\n    };\n    return eventsUnsub;\n  }\n\n  return {\n    create,\n    join,\n    leave,\n    append,\n    onSnapshot,\n  };\n}\n"],"names":["firebaseAdapter","db","window","__FIREBASE","Error","cfg","app","getApps","initializeApp","getDatabase","ensureApp","eventsUnsub","roomPath","myRole","presenceRef","create","async","roomId","rRef","ref","get","exists","set","createdAt","Date","now","join","leave","_roomId","remove","catch","Promise","resolve","append","ev","t","by","pRef","pSnap","presence","val","host","guest","child","onDisconnect","eRef","push","onSnapshot","cb","detach","onChildAdded","snap","v","events","off"],"sourceRoot":""}