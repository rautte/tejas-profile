{"version":3,"file":"static/js/634.226beb4d.chunk.js","mappings":"uKA6CO,SAASA,IACd,MAAM,GAAEC,GAvBV,WAEE,MAAMC,EAAmCC,OAAeC,WACxD,GAAQ,OAAHF,QAAG,IAAHA,IAAAA,EAAKG,YACR,MAAM,IAAIC,MACR,wGAGJ,MAAMC,GAAMC,EAAAA,EAAAA,MAAUC,QAASD,EAAAA,EAAAA,MAAU,IAAKE,EAAAA,EAAAA,IAAcR,GAE5D,MAAO,CAAEK,MAAKN,IADHU,EAAAA,EAAAA,IAAYJ,GAEzB,CAYiBK,GAEf,MAAO,CACL,YAAMC,CAAOC,SACLC,EAAAA,EAAAA,KAAIC,EAAAA,EAAAA,IAAIf,EAAI,SAASa,UAAgB,CAAEG,QAASC,KAAKC,OAE7D,EAEA,UAAMC,CAAKC,GAGX,EAEA,WAAMC,CAAMD,GAGZ,EAEA,YAAME,CAAOT,EAAgBU,SACrBC,EAAAA,EAAAA,KAAKT,EAAAA,EAAAA,IAAIf,EAAI,SAASa,YAAkBU,EAChD,EAEAE,UAAAA,CAAWZ,EAAgBa,GACzB,MAAMC,GAAYZ,EAAAA,EAAAA,IAAIf,EAAI,SAASa,YAC7Be,GAAcC,EAAAA,EAAAA,IAAQF,EAAYG,IACtC,MAAMC,EAnCd,SAAwBC,GACtB,MAAMC,EAAMD,EAAEC,MACd,OAAKA,EAEEC,OAAOC,KAAKF,GAChBG,OACAC,IAAKC,GAAML,EAAIK,IAJD,EAKnB,CA4BuBC,CAAeT,GAC9BJ,EAAG,CAAEK,aAGP,MAAO,KACL,KACES,EAAAA,EAAAA,IAAIb,EAAW,QAASC,EAC1B,CAAE,MAEA,IACGA,GACH,CAAE,MAAO,CACX,EAEJ,EAEJ,C","sources":["lib/mp/adapters/firebase.ts"],"sourcesContent":["// RTDB adapter (Firebase v9 modular)\nimport { initializeApp, getApps, FirebaseApp } from \"firebase/app\";\nimport {\n  getDatabase,\n  ref,\n  set,\n  push,\n  onValue,\n  off,\n  DataSnapshot,\n  Database,\n} from \"firebase/database\";\nimport type { MPAdapter, MPEvent, Snapshot } from \"../index\";\n\n// Read config from a global injected by your HTML (or wherever you put it)\ntype FirebaseConfig = {\n  apiKey: string;\n  authDomain?: string;\n  databaseURL: string;\n  projectId?: string;\n  appId?: string;\n};\n\nfunction ensureApp(): { app: FirebaseApp; db: Database } {\n  // @ts-ignore\n  const cfg: FirebaseConfig | undefined = (window as any).__FIREBASE;\n  if (!cfg?.databaseURL) {\n    throw new Error(\n      \"Missing window.__FIREBASE.databaseURL (example: https://your-project-id-default-rtdb.firebaseio.com)\"\n    );\n  }\n  const app = getApps().length ? getApps()[0] : initializeApp(cfg);\n  const db = getDatabase(app);\n  return { app, db };\n}\n\nfunction sortEventsSnap(s: DataSnapshot): MPEvent[] {\n  const val = s.val() as Record<string, MPEvent> | null;\n  if (!val) return [];\n  // Children are random push IDs; stable order by key ensures consistent append order\n  return Object.keys(val)\n    .sort()\n    .map((k) => val[k]);\n}\n\nexport function firebaseAdapter(): MPAdapter {\n  const { db } = ensureApp();\n\n  return {\n    async create(roomId: string) {\n      await set(ref(db, `rooms/${roomId}/meta`), { created: Date.now() });\n      // events list is created lazily by push()\n    },\n\n    async join(_roomId: string) {\n      // You can set presence if you want; not required for gameplay\n      return;\n    },\n\n    async leave(_roomId: string) {\n      // No-op; weâ€™re not removing rooms or presence here\n      return;\n    },\n\n    async append(roomId: string, ev: MPEvent) {\n      await push(ref(db, `rooms/${roomId}/events`), ev);\n    },\n\n    onSnapshot(roomId: string, cb: (snap: Snapshot) => void) {\n      const eventsRef = ref(db, `rooms/${roomId}/events`);\n      const unsubscribe = onValue(eventsRef, (snap) => {\n        const events = sortEventsSnap(snap);\n        cb({ events });\n      });\n      // Return unsubscriber compatible with our Room.watch()\n      return () => {\n        try {\n          off(eventsRef, \"value\", unsubscribe as any);\n        } catch {\n          // onValue already returns an unsubscribe; call it too\n          try {\n            (unsubscribe as unknown as () => void)();\n          } catch {}\n        }\n      };\n    },\n  };\n}\n"],"names":["firebaseAdapter","db","cfg","window","__FIREBASE","databaseURL","Error","app","getApps","length","initializeApp","getDatabase","ensureApp","create","roomId","set","ref","created","Date","now","join","_roomId","leave","append","ev","push","onSnapshot","cb","eventsRef","unsubscribe","onValue","snap","events","s","val","Object","keys","sort","map","k","sortEventsSnap","off"],"sourceRoot":""}